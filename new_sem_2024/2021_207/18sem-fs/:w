#include <sys/timerfd.h>
#include <time.h>
#include <unistd.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>

// static void print_elapsed_time(void) {
//    static struct timespec start;
//    struct timespec curr;
//    static int first_call = 1;
//    int secs, nsecs;
//
//    if (first_call) {
//        first_call = 0;
//        if (clock_gettime(CLOCK_MONOTONIC, &start) == -1)
//            handle_error("clock_gettime");
//    }
//
//    if (clock_gettime(CLOCK_MONOTONIC, &curr) == -1)
//        handle_error("clock_gettime");
//
//    secs = curr.tv_sec - start.tv_sec;
//    nsecs = curr.tv_nsec - start.tv_nsec;
//    if (nsecs < 0) {
//        secs--;
//        nsecs += 1000000000;
//    }
//    printf("%d.%03d: ", secs, (nsecs + 500000) / 1000000);
// }

int main(int argc, char *argv[]) {
    if (argc < 2) {
        fprintf(stderr, "not enough args\n");
        exit(1);
    }

   struct timespec now;
   clock_gettime(CLOCK_REALTIME, &now);

   struct itimerspec new_value;
   new_value.it_value.tv_sec = now.tv_sec + atoi(argv[1]);
   new_value.it_value.tv_nsec = now.tv_nsec;
   new_value.it_interval.tv_sec = 1;
   new_value.it_interval.tv_nsec = 0;

   int fd = timerfd_create(CLOCK_REALTIME, 0);

   timerfd_settime(fd, TFD_TIMER_ABSTIME, &new_value, NULL);

   printf("timer started\n");

   uint64_t exp;
   const int max_alarms = 5;
   int alarms = 0;
   while (1) {
       read(fd, &exp, sizeof(exp));
       printf("timer worked\n");
       alarms++;
       if (alarms > max_alarms) {
           struct itimerspec stop_value;
           stop_value.it_value.tv_sec = 0;
           stop_value.it_value.tv_nsec = 0;
           stop_value.it_interval.tv_sec = 0;
           stop_value.it_interval.tv_nsec = 0;

           timerfd_settime(fd, TFD_TIMER_ABSTIME, &stop_value, NULL);
       }
   }
}

